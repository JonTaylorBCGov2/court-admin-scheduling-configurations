def RELEASE_VERSION = '1.0'

pipeline {
  agent any
  options {
    disableResume()
    buildDiscarder(logRotator(numToKeepStr: '5')) // keep 5 builds only
  }
  environment {
    CI = 'true'

    // The name of the project namespace(s).
    NAME_SPACE = '01a527'

    // This should match your monorepo folder structure
    API_DIRECTORY = 'api'
    FRONTEND_DIRECTORY = 'web'
    SOURCE_DIRECTORY = 'ScheriffSchedulingSrc'

    // Rocket.Chat Configuration
    ROCKET_CHAT_SECRET = 'rocket-chat-secrets'
    ROCKET_CHAT_WEBHOOK_KEY = 'rocket-deploy-webhook'

    // The URI to the application being deployed.
    VANITY_URL = sh(script: 'echo "${VANITY_URL:-https://sheriff-scheduling-dev.apps.silver.devops.gov.bc.ca/}"', returnStdout: true).trim()
    OC_JOB_NAME = sh(script: 'echo "${OC_JOB_NAME:-dev}"', returnStdout: true).trim()
    ENABLE_VERSION_PROMPT = sh(script: 'echo "${ENABLE_VERSION_PROMPT:-false}"', returnStdout: true).trim()
    SOURCE_REPO = sh(script: 'echo "${SOURCE_REPO:-https://github.com/bcgov/sheriff-scheduling.git}"', returnStdout: true).trim()
    SOURCE_REPO_BRANCH = sh(script: 'echo "${SOURCE_REPO_BRANCH:-master}"', returnStdout: true).trim()
    DESTINATION = sh(script: 'echo "${DESTINATION:-dev}"', returnStdout: true).trim()

    // Do not deploy schema-spy to PROD
    SCHEMA_SPY_APP_NAME = "schema-spy"
  }

  stages {
    stage('Initialize') {
      steps {
        script {
          // load supporting functions from external script files
          commonPipeline = load 'scripts/common.groovy'
          notify = load 'scripts/notify.groovy'

          // Cancel any running builds in progress
          timeout(time: 10, unit: 'MINUTES') {
            echo 'Cancelling previous builds in progress...'
            commonPipeline.abortAllPreviousBuildsInProgress(currentBuild)
          }

          // Ensure required secrets and credentials are available in the CI environment
          // [add more secrets here if needed...]
          env.ROCKET_DEPLOY_WEBHOOK = sh(script: "oc extract --to=- --keys=${ROCKET_CHAT_WEBHOOK_KEY} secret/${ROCKET_CHAT_SECRET} 2>&1 | sed -n 2p", returnStdout: true).trim()
          echo env.ROCKET_DEPLOY_WEBHOOK

          // whether runtime build should be skipped
          env.RUNTIME_CHANGES = commonPipeline.hasDirectoryChanged('openshift/templates/web').toString()
        }
      }
    }
    stage('Version Prompt') {
      when {
        anyOf {
          expression { env.GIT_BRANCH == 'origin/release' }
          expression { new Boolean(env.ENABLE_VERSION_PROMPT) }
        }
      }
      steps {
        script {
          timeout(time: 5, unit: 'MINUTES') {
            def version = input(message: 'Enter the version tag for this release', parameters: [
              string(name: 'RELEASE VERSION', defaultValue: '', description: '')
            ])
            if (version != '') {
              RELEASE_VERSION = version
            } else {
              error '***  No release version specified. Aborting pipeline.  ***'
            }
          }
        }
      }
    }

    stage('Build') {
      when {
        expression { new Boolean(env.SKIP_BUILD) == false }
      }
      failFast true
      options {
        timeout(time: 20, unit: 'MINUTES')
      }
      parallel {
        stage('Build Frontend') {
          steps {
            script {
              if (env.RUNTIME_CHANGES.equalsIgnoreCase('false')) {
                sh """
                  OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build web-artifacts -apply
                  OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build web -apply
                """
              } else {
                sh """
                  OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build web-runtime -apply
                  OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build web-artifacts -apply
                  OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build web -apply
                """
              }
            }
          }
        }
        stage('Build Backend') {
          steps {
            script {
              sh """
                OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build api -apply
              """
            }
          }
        }
      }
    }

    stage('Deploy') {
      when {
        expression { new Boolean(env.SKIP_BUILD) == false }
      }
      options {
        timeout(time: 10, unit: 'MINUTES')
      }
      steps {
        script {
          def img_backend = 'api'
          def img_frontend = 'web'

          // tag release version (if provided)
          if (RELEASE_VERSION != '') {
            echo "Tagging images - ${img_backend}:latest, ${img_frontend}:latest..."
            sh "oc tag ${img_backend}:latest ${img_backend}:${RELEASE_VERSION}"
            sh "oc tag ${img_frontend}:latest ${img_frontend}:${RELEASE_VERSION}"
          } else {
            RELEASE_VERSION = 'latest'
          }

          sh "RELEASE_TAG=${RELEASE_VERSION} ./player.sh deploy api ${OC_JOB_NAME} -apply"
          sh "RELEASE_TAG=${RELEASE_VERSION} ./player.sh deploy web ${OC_JOB_NAME} -apply"
        }
      }
    }

    stage('Recycle') {
     when {
        expression { new Boolean(env.SKIP_BUILD) == false }
      }
      options {
        timeout(time: 10, unit: 'MINUTES')
      }
      steps {
        script {
          echo "Recycling ${SCHEMA_SPY_APP_NAME} in ${NAMES_PACE}-dev to refresh schema..."
          sh "./player.sh recycle dev -apply"
        }
      }
    }
  }
  post {
    success {
      script {
        if (new Boolean(env.SKIP_BUILD) == false) {
          notify.success('Sheriff Scheduling', RELEASE_VERSION, DESTINATION.toUpperCase(), env.ROCKET_DEPLOY_WEBHOOK)
        }
      }
    }
    failure {
      script {
        notify.failure('Sheriff Scheduling', RELEASE_VERSION, DESTINATION.toUpperCase(), env.ROCKET_DEPLOY_WEBHOOK)
      }
    }
  } // post-stages
}
